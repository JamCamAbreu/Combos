Microsoft (R) Macro Assembler Version 14.00.24210.0	    03/19/17 18:56:57
$Combos     (abreu_assignment06B.asm			     Page 1 - 1


				TITLE Combos     (abreu_assignment06B.asm)

				; Author: James Cameron Abreu
				; Course: CS271-400
				; Project ID: Assignment 06-B
				; Date: 3/15/2016
				; Description: This program may help the user prepare for any combinations 
				;  test! It uses some advanced MASM concepts such as low-level string to 
				;  decimal processing, string operations, stack operations, local variables, 
				;  macros, and more! I took time to document my logic and code, so I hope you 
				;  enjoy 'Combos'!


				; INCLUDE FILES -------------------------------------------------------------------------
				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; LINE NUMBERS: (for cool folks that 'gg' to lines in vim)------|
				;																|
				;	constants.......................40							|
				;	macros..........................90							|
				;	.data...........................120							|
				;	procedure prototypes............190							|
				;																|
				;	PROCEDURES (tab implies nested usage):						|
				;		MAIN........................200							|
				;		introduction................260							|
				;		showProblem.................300							|
				;			getRandomRange..........360							|
				;		getData.....................390							|
				;			stringToDec.............440							|
				;			stringSize..............520							|
				;		combinations................560							|
				;			factorial...............650							|
				;		showResults.................710							|
				;		tryAgain....................770							|
				;																|
				;----------------------------------------------------------------


				; CONSTANTS -----------------------------------------------------------------------------

				; The following formula is used:
				;									____n!____
				;									r!(n - r)!

				; Program Name:
 = "Combos, a Combination Q	PROGRAM_NAME EQU <"Combos, a Combination Quiz by James Cameron Abreu", 0>
   uiz by James Cameron Abr
   eu", 0

				; User input
 = 00000014			MAX_CHARS = 20		; max input buffer

				; Calculation constants:
 = 00000003			N_MIN = 3
 = 0000000C			N_MAX = 12

				; ASCII: 
 = 00000009			TAB = 9
 = 00000030			ASCII_0	= 48
 = 00000039			ASCII_9 = 57
 = 00000079			ASCII_Y = 121
 = 00000059			ASCII_Y_UP = 89

				; stack position using DWORDs
 = 00000008			STK_D0 = 8
 = 0000000C			STK_D1 = 12
 = 00000010			STK_D2 = 16
 = 00000014			STK_D3 = 20
 = 00000018			STK_D4 = 24

				; stack positions (for DWORDS) after calling pushad instruction
 = 00000024			AFTERAD_D0 = 36
 = 00000028			AFTERAD_D1 = 40
 = 0000002C			AFTERAD_D2 = 44
 = 00000030			AFTERAD_D3 = 48

				; combination PROC, LOCAL VARIABLES:
 = DWORD PTR [ebp - 4]		COMB_NUM		EQU DWORD PTR [ebp - 4]
 = DWORD PTR [ebp - 8]		COMB_DEN		EQU DWORD PTR [ebp - 8]
 = DWORD PTR [ebp - 12]		COMB_R_FAC		EQU DWORD PTR [ebp - 12]
 = DWORD PTR [ebp - 16]		COMB_NR_FAC		EQU DWORD PTR [ebp - 16]

				; tryAgain PROC, LOCAL VARIABLES:
 = BYTE PTR [ebp - MAX_CHAR	TRY_BUFFER		EQU BYTE PTR [ebp - MAX_CHARS]
   S]






				; MACROS --------------------------------------------------------------------------------

				; WRITES a string to the screen with given argument:
				; (Courtesy of macro lecture week 09)
				mWriteString MACRO buffer
					push	edx
					mov		edx, OFFSET buffer
					call	writeString
					pop		edx
				ENDM


				; READS a string from user input int a given argument:
				; (Courtesy of macro lecture week 09)
				mReadString MACRO varName
					push	ecx
					push	edx
					mov		edx, OFFSET varName
					mov		ecx, (SIZE OF varName) - 1 ; null terminated char
					call	readString
					pop		edx
					pop		ecx
				ENDM







				; DATA SEGMENT---------------------------------------------------------------------------
 00000000			.data

				; MAIN

				; introduction
 00000000 43 6F 6D 62 6F	intro_title			BYTE		PROGRAM_NAME
	   73 2C 20 61 20
	   43 6F 6D 62 69
	   6E 61 74 69 6F
	   6E 20 51 75 69
	   7A 20 62 79 20
	   4A 61 6D 65 73
	   20 43 61 6D 65
	   72 6F 6E 20 41
	   62 72 65 75 00
 00000032 49 6E 73 74 72	intro_instructions	BYTE		"Instructions: Combos is a quiz program developed "
	   75 63 74 69 6F
	   6E 73 3A 20 43
	   6F 6D 62 6F 73
	   20 69 73 20 61
	   20 71 75 69 7A
	   20 70 72 6F 67
	   72 61 6D 20 64
	   65 76 65 6C 6F
	   70 65 64 20
 00000063  74 6F 20 67 69						BYTE		"to give extra practice in calculating combinations "
	   76 65 20 65 78
	   74 72 61 20 70
	   72 61 63 74 69
	   63 65 20 69 6E
	   20 63 61 6C 63
	   75 6C 61 74 69
	   6E 67 20 63 6F
	   6D 62 69 6E 61
	   74 69 6F 6E 73
	   20
 00000096  75 73 69 6E 67						BYTE		"using the following formula: ", 0
	   20 74 68 65 20
	   66 6F 6C 6C 6F
	   77 69 6E 67 20
	   66 6F 72 6D 75
	   6C 61 3A 20 00
 000000B4 09 09 5F 5F 5F	intro_formula1		BYTE		TAB, TAB, "____n!____", 0
	   5F 6E 21 5F 5F
	   5F 5F 00
 000000C1 09 09 72 21 28	intro_formula2		BYTE		TAB, TAB, "r!(n - r)!", 0
	   6E 20 2D 20 72
	   29 21 00
 000000CE 4C 69 6D 69 74	intro_limits1		BYTE		"Limitations: A minimum of ", 0
	   61 74 69 6F 6E
	   73 3A 20 41 20
	   6D 69 6E 69 6D
	   75 6D 20 6F 66
	   20 00
 000000E9 20 61 6E 64 20	intro_limits2		BYTE		" and a maximum of ", 0
	   61 20 6D 61 78
	   69 6D 75 6D 20
	   6F 66 20 00
 000000FC 20 77 69 6C 6C	intro_limits3		BYTE		" will be used for 'n'", 0
	   20 62 65 20 75
	   73 65 64 20 66
	   6F 72 20 27 6E
	   27 00

				; showProblem
 00000112 00000003		minN				DWORD		N_MIN
 00000116 0000000C		maxN				DWORD		N_MAX
 0000011A 00000000		n					DWORD		?
 0000011E 00000000		r					DWORD		?
 00000122 51 75 65 73 74	showProb_Q			BYTE		"Question: ", 0
	   69 6F 6E 3A 20
	   00
 0000012D 4E 2C 20 74 68	showProb_n			BYTE		"N, the number of elements in the set: ", 0
	   65 20 6E 75 6D
	   62 65 72 20 6F
	   66 20 65 6C 65
	   6D 65 6E 74 73
	   20 69 6E 20 74
	   68 65 20 73 65
	   74 3A 20 00
 00000154 52 2C 20 74 68	showProb_r			BYTE		"R, the number of elements to choose from the set: ", 0
	   65 20 6E 75 6D
	   62 65 72 20 6F
	   66 20 65 6C 65
	   6D 65 6E 74 73
	   20 74 6F 20 63
	   68 6F 6F 73 65
	   20 66 72 6F 6D
	   20 74 68 65 20
	   73 65 74 3A 20
	   00
				; getRandomRange

				; getData
 00000187 48 6F 77 20 6D	getData_prompt		BYTE		"How many ways can you choose? Your answer: ", 0
	   61 6E 79 20 77
	   61 79 73 20 63
	   61 6E 20 79 6F
	   75 20 63 68 6F
	   6F 73 65 3F 20
	   59 6F 75 72 20
	   61 6E 73 77 65
	   72 3A 20 00
 000001B3  00000014 [		userInput			BYTE		MAX_CHARS DUP (0)
	    00
	   ]

				; stringSize
 000001C7 00000000		actualSize			DWORD		0	

				; stringToDec
 000001CB 00000000		answerConverted		DWORD		?
 000001CF 54 68 65 20 64	inputError			BYTE		"The data entered was invalid", 0
	   61 74 61 20 65
	   6E 74 65 72 65
	   64 20 77 61 73
	   20 69 6E 76 61
	   6C 69 64 00

				; combinations
 000001EC 00000001		finalSum			DWORD		1 ; must be '1' to begin. 

				; factorial
 000001F0 00000000		result				DWORD		?

				; showResults
 000001F4 46 6F 72 20 61	showR_answer1		BYTE		"For a set of ", 0
	   20 73 65 74 20
	   6F 66 20 00
 00000202 20 69 74 65 6D	showR_answer2		BYTE		" items in a set of ", 0
	   73 20 69 6E 20
	   61 20 73 65 74
	   20 6F 66 20 00
 00000216 2C 20 74 68 65	showR_answer3		BYTE		", there are ", 0
	   72 65 20 61 72
	   65 20 00
 00000223 20 63 6F 6D 62	showR_answer4		BYTE		" combinations.", 0
	   69 6E 61 74 69
	   6F 6E 73 2E 00

 00000232 59 65 73 21 20	showR_right			BYTE		"Yes! You are correct!", 0
	   59 6F 75 20 61
	   72 65 20 63 6F
	   72 72 65 63 74
	   21 00
 00000248 44 6F 6E 27 74	showR_wrong			BYTE		"Don't give up! Review your math and try again!", 0
	   20 67 69 76 65
	   20 75 70 21 20
	   52 65 76 69 65
	   77 20 79 6F 75
	   72 20 6D 61 74
	   68 20 61 6E 64
	   20 74 72 79 20
	   61 67 61 69 6E
	   21 00
 00000277 2D 2D 2D 2D 2D	showR_LB			BYTE		"------------------------------------------------------------", 0
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   00

				; tryAgain
 000002B4 57 6F 75 6C 64	tryAgain_prompt		BYTE		"Would you like to try another problem?", 0
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 74 72
	   79 20 61 6E 6F
	   74 68 65 72 20
	   70 72 6F 62 6C
	   65 6D 3F 00
 000002DB 28 45 6E 74 65	tryAgain_inst		BYTE		"(Enter 'Y' for yes or 'N' to quit): ", 0
	   72 20 27 59 27
	   20 66 6F 72 20
	   79 65 73 20 6F
	   72 20 27 4E 27
	   20 74 6F 20 71
	   75 69 74 29 3A
	   20 00
 00000300 54 68 61 6E 6B	tryAgain_thanks		BYTE		"Thanks for playing ", PROGRAM_NAME, 0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 20 43
	   6F 6D 62 6F 73
	   2C 20 61 20 43
	   6F 6D 62 69 6E
	   61 74 69 6F 6E
	   20 51 75 69 7A
	   20 62 79 20 4A
	   61 6D 65 73 20
	   43 61 6D 65 72
	   6F 6E 20 41 62
	   72 65 75 00 00
 00000346 00000000		quit				DWORD		0



				; DEBUG
 0000034A 59 6F 75 72 20	D_stringSize		BYTE		"Your string size was: ", 0
	   73 74 72 69 6E
	   67 20 73 69 7A
	   65 20 77 61 73
	   3A 20 00
 00000361 09 00			D_TAB				BYTE		TAB, 0






				; PROCEDURE PROTOTYPES-------------------------------------------------------------------

				; stringSize
				stringSize PROTO,
					pInput: PTR BYTE,			; address that will store the string input
					pInputSize: PTR DWORD		; pointer to DWORD storage for size




				; CODE SEGMENT---------------------------------------------------------------------------
 00000000			.code
 00000000			main PROC
					; Random Seed
 00000000  E8 00000000 E		CALL	randomize

					; Introduction
 00000005  E8 0000007F			CALL	introduction

 0000000A				GAME_LOOP: 
					; Show a problem:
 0000000A  68 0000011E R		PUSH	OFFSET r
 0000000F  68 0000011A R		PUSH	OFFSET n
 00000014  FF 35 00000116 R		PUSH	maxN
 0000001A  FF 35 00000112 R		PUSH	minN
 00000020  E8 000000F5			Call	showProblem

					; Get data from user:
 00000025  68 000001CB R		PUSH	OFFSET answerConverted
 0000002A  68 000001C7 R		PUSH	OFFSET actualSize
 0000002F  6A 14			PUSH	LENGTHOF userInput
 00000031  68 000001B3 R		PUSH	OFFSET	userInput
 00000036  E8 0000016C			CALL	getData

					; Calculate:
 0000003B  68 000001F0 R		PUSH	OFFSET result
 00000040  FF 35 0000011E R		PUSH	r
 00000046  FF 35 0000011A R		PUSH	n
 0000004C  E8 000001FA			CALL	combinations

					; show answer to user:
 00000051  FF 35 0000011E R		PUSH	r
 00000057  FF 35 0000011A R		PUSH	n
 0000005D  FF 35 000001F0 R		PUSH	result
 00000063  FF 35 000001CB R		PUSH	answerConverted
 00000069  E8 00000268			Call	showResults

					; try again?
 0000006E  68 00000346 R		PUSH	OFFSET quit
 00000073  E8 000002F1			call	tryAgain

 00000078  A1 00000346 R		mov		eax, quit
 0000007D  83 F8 00			cmp		eax, 0
 00000080  74 88			je		GAME_LOOP

					exit	; exit to operating system
 00000082  6A 00	   *	    push   +000000000h
 00000084  E8 00000000 E   *	    call   ExitProcess
 00000089			main ENDP












				; ------------------------------------------------------------------
 00000089			introduction PROC
				;
				; Description: Displays the title, program description, and program 
				;  limitations.
				; Receives: none
				; Returns: none
				; Registers Modified: none
				; ------------------------------------------------------------------

					mWriteString	intro_title
 00000089  52		     1		push	edx
 0000008A  BA 00000000 R     1		mov		edx, OFFSET intro_title
 0000008F  E8 00000000 E     1		call	writeString
 00000094  5A		     1		pop		edx
 00000095  E8 00000000 E		call			CrLf
 0000009A  E8 00000000 E		call			CrLf

					mWriteString	intro_instructions
 0000009F  52		     1		push	edx
 000000A0  BA 00000032 R     1		mov		edx, OFFSET intro_instructions
 000000A5  E8 00000000 E     1		call	writeString
 000000AA  5A		     1		pop		edx
 000000AB  E8 00000000 E		call			CrLf
					mWriteString	intro_formula1
 000000B0  52		     1		push	edx
 000000B1  BA 000000B4 R     1		mov		edx, OFFSET intro_formula1
 000000B6  E8 00000000 E     1		call	writeString
 000000BB  5A		     1		pop		edx
 000000BC  E8 00000000 E		call			CrLf	
					mWriteString	intro_formula2
 000000C1  52		     1		push	edx
 000000C2  BA 000000C1 R     1		mov		edx, OFFSET intro_formula2
 000000C7  E8 00000000 E     1		call	writeString
 000000CC  5A		     1		pop		edx
 000000CD  E8 00000000 E		call			CrLf	
 000000D2  E8 00000000 E		call			CrLf	

					mWriteString	intro_limits1
 000000D7  52		     1		push	edx
 000000D8  BA 000000CE R     1		mov		edx, OFFSET intro_limits1
 000000DD  E8 00000000 E     1		call	writeString
 000000E2  5A		     1		pop		edx
 000000E3  B8 00000003			mov				eax, N_MIN
 000000E8  E8 00000000 E		call			writeDec
					mWriteString	intro_limits2
 000000ED  52		     1		push	edx
 000000EE  BA 000000E9 R     1		mov		edx, OFFSET intro_limits2
 000000F3  E8 00000000 E     1		call	writeString
 000000F8  5A		     1		pop		edx
 000000F9  B8 0000000C			mov				eax, N_MAX
 000000FE  E8 00000000 E		call			writeDec
					mWriteString	intro_limits3
 00000103  52		     1		push	edx
 00000104  BA 000000FC R     1		mov		edx, OFFSET intro_limits3
 00000109  E8 00000000 E     1		call	writeString
 0000010E  5A		     1		pop		edx
 0000010F  E8 00000000 E		call			CrLf
 00000114  E8 00000000 E		call			CrLf

 00000119  C3				ret
 0000011A			introduction ENDP






				; ------------------------------------------------------------------
 0000011A			showProblem PROC
				;
				; Description: Generates a problem by getting a random integer for 
				;  n and r, then displays the problem for the user to work on. 
				; Receives: see parameters
				; Returns: 
				; Registers Modified: none
				; Parameters: (in stack style, reverse order):
					; argument3 = @R
					; argument2 = @N
					; argument1 = maxN
					; argument0 = minN
 0000011A  60				pushad
 0000011B  8B EC			mov				ebp, esp
					
					; get random n, between min and max-------
 0000011D  FF 75 28			push			[ebp + AFTERAD_D1]	; max
 00000120  FF 75 24			push			[ebp + AFTERAD_D0]	; min
 00000123  E8 00000063			call			getRandomRange
					; mov random eax into our n variable:
 00000128  8B 55 2C			mov				edx, [ebp + AFTERAD_D2]
 0000012B  89 02			mov				[edx], eax

					; get random r, between 1 and n-----------
 0000012D  8B 12			mov				edx, [edx]			; max
 0000012F  52				push			edx
 00000130  BA 00000001			mov				edx, 1
 00000135  52				push			edx					; min
 00000136  E8 00000050			call			getRandomRange
					; mov random eax into our r
 0000013B  8B 55 30			mov				edx, [ebp + AFTERAD_D3]
 0000013E  89 02			mov				[edx], eax

					; display question------------------------
					mWriteString	showProb_Q
 00000140  52		     1		push	edx
 00000141  BA 00000122 R     1		mov		edx, OFFSET showProb_Q
 00000146  E8 00000000 E     1		call	writeString
 0000014B  5A		     1		pop		edx
 0000014C  E8 00000000 E		call			CrLf

					mWriteString	showProb_n
 00000151  52		     1		push	edx
 00000152  BA 0000012D R     1		mov		edx, OFFSET showProb_n
 00000157  E8 00000000 E     1		call	writeString
 0000015C  5A		     1		pop		edx
 0000015D  8B 45 2C			mov				eax, [EBP + AFTERAD_D2]
 00000160  8B 00			mov				eax, [eax]
 00000162  E8 00000000 E		call			writeDec
 00000167  E8 00000000 E		call			CrLF

					mWriteString	showProb_r
 0000016C  52		     1		push	edx
 0000016D  BA 00000154 R     1		mov		edx, OFFSET showProb_r
 00000172  E8 00000000 E     1		call	writeString
 00000177  5A		     1		pop		edx
 00000178  8B 45 30			mov				eax, [EBP + AFTERAD_D3]
 0000017B  8B 00			mov				eax, [eax]
 0000017D  E8 00000000 E		call			writeDec
 00000182  E8 00000000 E		call			CrLf

 00000187  61				popad
 00000188  C2 0010			ret	16
 0000018B			showProblem ENDP







				; ------------------------------------------------------------------
 0000018B			getRandomRange PROC USES ebp edx ebx
				;
				; Description: Gets a random integer within a range, leaves result in eax
				; Receives: see parameters
				; Returns: random int between min and max returned in eax
				; Registers Modified: EAX
				; Parameters: (in stack style, reverse order):
					; argument1 = max, DWORD (ebp + 20)
					; argument0 = min, DWORD (ebp + 16)
 0000018B  55		   *	    push   ebp
 0000018C  52		   *	    push   edx
 0000018D  53		   *	    push   ebx
 0000018E  8B EC			mov				ebp, esp
					
 00000190  8B 55 10			mov				edx, [EBP + 16]
 00000193  8B 5D 14			mov				ebx, [EBP + 20]

 00000196  8B C3			mov				eax, ebx			; eax = min
 00000198  2B C2			sub				eax, edx			; (max - min)
 0000019A  E8 00000000 E		call			randomRange
 0000019F  03 C2			add				eax, edx			; eax + min

 000001A1  5B		   *	    pop    ebx
 000001A2  5A		   *	    pop    edx
 000001A3  5D		   *	    pop    ebp
 000001A4  C2 0008			ret	8
 000001A7			getRandomRange ENDP








				; ------------------------------------------------------------------
 000001A7			getData PROC
				;
				; Description: Prompts the user to enter an answer. Then takes that string 
				;  and converts it to a combined digit using low level programming. 
				; Receives: see parameters
				; Returns: none
				; Registers Modified: none
				; Parameters: (in stack style, reverse order):
					; argument3 = OFFSET result of input variable
					; argument2 = OFFSET actual bytes entered variable
					; argument1 = LENGTHOF input variable
					; argument0 = OFFSET input variable
				; ------------------------------------------------------------------
 000001A7  60				pushad			; 32 bytes pushed onto stack
 000001A8  8B EC			mov				ebp, esp

					; "Your answer: "
					mWriteString	getData_prompt
 000001AA  52		     1		push	edx
 000001AB  BA 00000187 R     1		mov		edx, OFFSET getData_prompt
 000001B0  E8 00000000 E     1		call	writeString
 000001B5  5A		     1		pop		edx

					; get string from user and store in userInput
 000001B6  8B 55 24			mov				edx, [EBP + AFTERAD_D0]
 000001B9  8B 4D 28			mov				ecx, [EBP + AFTERAD_D1]
 000001BC  49				dec				ecx ; because of null terminated string
 000001BD  E8 00000000 E		call			ReadString
					
					; convert to dec:
					INVOKE stringSize,  [EBP + AFTERAD_D0], [EBP + AFTERAD_D2]
 000001C2  FF 75 2C	   *	    push   dword  ptr [ebp]+00000002Ch
 000001C5  FF 75 24	   *	    push   dword  ptr [ebp]+000000024h
 000001C8  E8 0000005B	   *	    call   stringSize
					; now EBP + AFTERAD_D2 contains the offset of the input actual size (in chars)

 000001CD  FF 75 30			push	[EBP + AFTERAD_D3]
 000001D0  FF 75 2C			push	[EBP + AFTERAD_D2]
 000001D3  FF 75 24			push	[EBP + AFTERAD_D0]
 000001D6  E8 00000004			call	stringToDec ; automatically pops 12 bytes

 000001DB  61				popad
 000001DC  C2 000C			ret 12
 000001DF			getData ENDP












				; ------------------------------------------------------------------
 000001DF			stringToDec PROC
				;
				; Description: Low-Level programming. Converts a string of digits (if any 
				;  exist) into a combined decimal number, which is stored in a result
				; Receives: 
				; Returns: none
				; Registers Modified: none
				; Parameters (in stack style reverse order):
					; argument2 = result
					; argument1 = Actual count of bytes in string 
					; argument0 = @input
				; constants used:
					; ASCII_0 : 48
					; ASCII_9 : 57
				; Algorithm Used:
					; x = 0
					; for k = 0 to length(string) - 1 {
						; if 48 <= string[k] <= 57
							; x = 10 * x + (str[k] - 48)
						; else
							; break. Show error message
					; }
				; ------------------------------------------------------------------
 000001DF  60				pushad			; 32 bytes pushed onto stack
 000001E0  8B EC			mov				ebp, esp
					
 000001E2  8B 75 24			mov				esi, [EBP + AFTERAD_D0] ; starting location of string array
 000001E5  8B 4D 28			mov				ecx, [EBP + AFTERAD_D1] ; @size of string
 000001E8  8B 09			mov				ecx, [ecx]				; size of string

					; x = 0
 000001EA  B8 00000000			mov				eax, 0					; accumulator

					; for k = 0 to length(string) - 1 {
 000001EF				STRINGTODEC_ADDDIGIT:
 000001EF  8A 16				mov			dl, [esi]
 000001F1  80 FA 30				cmp			dl, ASCII_0
 000001F4  72 22				jb			STRINGTODEC_ERROR

 000001F6  80 FA 39				cmp			dl, ASCII_9
 000001F9  77 1D				ja			STRINGTODEC_ERROR

 000001FB				VALID_INPUT:
						; multiply eax by 10
 000001FB  BB 0000000A				mov			ebx, 10
 00000200  F7 E3				mul			ebx	

						; convert single digit to its numerical value
 00000202  BA 00000000				mov			edx, 0
 00000207  8A 16				mov			dl, [esi] ; (mov back)
 00000209  80 EA 30				sub			dl, ASCII_0

						; add to eax:
 0000020C  03 C2				add			eax, edx
					
						; k++:
 0000020E  46					inc			esi
 0000020F  E2 DE				loop		STRINGTODEC_ADDDIGIT

						; store result:
 00000211  8B 5D 2C				mov			ebx, [EBP + AFTERAD_D2]
 00000214  89 03				mov			[ebx], eax

						; finished:
 00000216  EB 0C				jmp			STRINGTODEC_END

 00000218				STRINGTODEC_ERROR:
						mWriteString	inputError
 00000218  52		     1		push	edx
 00000219  BA 000001CF R     1		mov		edx, OFFSET inputError
 0000021E  E8 00000000 E     1		call	writeString
 00000223  5A		     1		pop		edx

 00000224				STRINGTODEC_END:
 00000224  61				popad
 00000225  C2 000C			ret 12
 00000228			stringToDec ENDP






				; ------------------------------------------------------------------
 00000228			stringSize PROC USES edi eax edx,
					pInput: PTR BYTE,			; string passed in by reference
					pInputSize: PTR DWORD		; pointer to DWORD storage for size
				; Description: Uses string processing to check the size of the string 
				;  (not including terminating zero). Stores in parameter pInputSize.
				; Receives: see parameters
				; Returns: none
				; Registers Modified: none
				; Parameters: (in stack style, reverse order):
					; argument3 = OFFSET result of input variable
					; argument2 = OFFSET actual bytes entered variable
					; argument1 = LENGTHOF input variable
					; argument0 = OFFSET input variable
				; ------------------------------------------------------------------
 00000228  55		   *	    push   ebp
 00000229  8B EC	   *	    mov    ebp, esp
 0000022B  57		   *	    push   edi
 0000022C  50		   *	    push   eax
 0000022D  52		   *	    push   edx
 0000022E  8B 75 08			mov		esi, pInput 
 00000231  BA 00000000			mov		edx, 0				; temp accumulator

 00000236				STRINGSIZE_COUNT: 
 00000236  80 3E 00				cmp		BYTE PTR[esi], 0	; check if end of string
 00000239  74 04				je		STRINGSIZE_END
 0000023B  46					inc		esi
 0000023C  42					inc		edx					; size++

 0000023D  EB F7				jmp		STRINGSIZE_COUNT

 0000023F				STRINGSIZE_END:

						; store result in argument
 0000023F  8B 45 0C				mov		eax, [pInputSize]
 00000242  89 10				mov		[eax], edx

						ret
 00000244  5A		   *	    pop    edx
 00000245  58		   *	    pop    eax
 00000246  5F		   *	    pop    edi
 00000247  C9		   *	    leave  
 00000248  C2 0008	   *	    ret    00008h
 0000024B			stringSize ENDP






				; ------------------------------------------------------------------------
 0000024B			combinations PROC
				; 
				; Implementation note: This procedure implements the following algorithm:
				;	____n!____
				;	r!(n - r)!
				; receives: see parameters
				; returns: result of above algorithm
				; preconditions: n and r must be positive, n must be greater than r
				; registers changed: none
				; Parameters (in stack style reverse order):
					; argument2 = @result
					; argument1 = r
					; argument0 = n
				; ------------------------------------------------------------------------
 0000024B  60				pushad
 0000024C  8B EC			mov			ebp, esp

					;-------------------------------------------------------------------|
 0000024E  83 EC 10			sub			esp, 16		; LOCAL VARIABLES:							|
					;	 COMB_NUM		= DWORD PTR [ebp - 4]  = numerator				|
					;	 COMB_DEN		= DWORD PTR [ebp - 8]  = denominator			|
					;	 COMB_R_FAC		= DWORD PTR [ebp - 12] = denominator leftside r!|
					;	 COMB_NR_FAC	= DWORD PTR [ebp - 16] = denominator (n - r)!	|
					;-------------------------------------------------------------------|

 00000251				COMB_NUMERATOR: ; (n!)
 00000251  8B 45 24				mov		eax, [EBP + AFTERAD_D0]
 00000254  50					push	eax				; push n

 00000255  C7 45 FC				mov		COMB_NUM, 1
	   00000001
 0000025C  8D 45 FC				lea		eax, COMB_NUM
 0000025F  50					push	eax				; push @ COMB_NUM (local)
 00000260  E8 00000047				call	factorial

 00000265				COMB_DENOMINATOR: ; r!(n - r)!

						; r!
 00000265  8B 45 28				mov		eax, [EBP + AFTERAD_D1]
 00000268  50					push	eax				; push r

 00000269  C7 45 F4				mov		COMB_R_FAC, 1
	   00000001
 00000270  8D 45 F4				lea		eax, COMB_R_FAC
 00000273  50					push	eax				; push @ COMB_R_FAC (local)
 00000274  E8 00000033				call	factorial

						; (n - r)!
 00000279  8B 45 24				mov		eax, [EBP + AFTERAD_D0]
 0000027C  2B 45 28				sub		eax, [EBP + AFTERAD_D1]
 0000027F  50					push	eax				; push (n - r)

 00000280  C7 45 F0				mov		COMB_NR_FAC, 1
	   00000001
 00000287  8D 45 F0				lea		eax, COMB_NR_FAC
 0000028A  50					push	eax				; push @ COMB_NR_FAC (local)
 0000028B  E8 0000001C				call	factorial

						; multiply together:
 00000290  8B 45 F4				mov		eax, COMB_R_FAC
 00000293  8B 5D F0				mov		ebx, COMB_NR_FAC
 00000296  F7 E3				mul		ebx

 00000298  89 45 F8				mov		COMB_DEN, eax

 0000029B				COMB_DIVIDE:
 0000029B  8B 45 FC				mov		eax, COMB_NUM
 0000029E  8B 5D F8				mov		ebx, COMB_DEN
 000002A1  F7 F3				div		ebx

 000002A3  8B 5D 2C				mov		ebx, [EBP + AFTERAD_D2]
 000002A6  89 03				mov		[ebx], eax

 000002A8				COMB_CLEANUP:
 000002A8  8B E5			mov		esp, ebp	; remove locals from stack
 000002AA  61				popad
 000002AB  C3				ret
 000002AC			combinations ENDP














				; ------------------------------------------------------------------------
 000002AC			factorial PROC
				; RECURSIVE procedure to calculate the factorial of any positive number
				; Implementation note: This procedure implements the following recursive 
				; algorithm:
				;	if (n <= 1)
				;		return 1;
				;	else
				;		return n * factorial(n - 1);
				;
				; receives: starting value 'n' on stack, @sum on stack
				; returns: factorial = n*(factorial(n - 1))
				; preconditions: n must be positive, argument 0 MUST have a value of 1
				; registers changed: none
				; Parameters (in stack style reverse order):
					; argument1 = n
					; argument0 = @Final sum of factorial (must be 1 to start)
				; ------------------------------------------------------------------------
 000002AC  60				pushad
 000002AD  8B EC			mov			ebp, esp
					
 000002AF  8B 45 24			mov			eax, [EBP + AFTERAD_D0]		; @final sum of factorial in eax
 000002B2  8B 00			mov			eax, [eax]					; final sum of factorial in eax (dereferenced)
 000002B4  8B 5D 28			mov			ebx, [EBP + AFTERAD_D1]		; n in ebx

 000002B7  83 FB 01			cmp			ebx, 1
 000002BA  76 02			jbe			FACTORIAL_BASE
 000002BC  EB 02			jmp			FACTORIAL_RECURSE

 000002BE				FACTORIAL_BASE:
 000002BE  EB 12				jmp				FACTORIAL_END

 000002C0				FACTORIAL_RECURSE:
						; multiply finalSum by n
 000002C0  F7 E3				mul				ebx

						; store in pointer:
 000002C2  8B 55 24				mov				edx, [EBP + AFTERAD_D0]
 000002C5  89 02				mov				[edx], eax

						; n = (n - 1)
 000002C7  4B					dec				ebx

						; push arguments to stack and call recursively
 000002C8  53					push		ebx							; push n
 000002C9  8B 45 24				mov			eax, [EBP + AFTERAD_D0]		
 000002CC  50					push		eax							; push @finalSum
 000002CD  E8 FFFFFFDA				call		factorial

 000002D2				FACTORIAL_END:
 000002D2  61				popad
 000002D3  C2 0008			ret	8
 000002D6			factorial ENDP







				; ------------------------------------------------------------------
 000002D6			showResults PROC
				;
				; Description: Takes in an answer to a problem, and a user answer and 
				;  displays a message according to their equality
				; Receives: see parameters
				; Returns: none
				; Registers Modified: none
				; Parameters: (in stack style, reverse order):
					; argument3 = r
					; argument2 = n
					; argument1 = realAnswer
					; argument0 = userAnswer
 000002D6  60				pushad
 000002D7  8B EC			mov				ebp, esp


 000002D9  E8 00000000 E		call			CrLf
					mWriteString	showR_answer1
 000002DE  52		     1		push	edx
 000002DF  BA 000001F4 R     1		mov		edx, OFFSET showR_answer1
 000002E4  E8 00000000 E     1		call	writeString
 000002E9  5A		     1		pop		edx
 000002EA  8B 45 30			mov				eax, [ebp + AFTERAD_D3]		; r
 000002ED  E8 00000000 E		call			writeDec
					mWriteString	showR_answer2
 000002F2  52		     1		push	edx
 000002F3  BA 00000202 R     1		mov		edx, OFFSET showR_answer2
 000002F8  E8 00000000 E     1		call	writeString
 000002FD  5A		     1		pop		edx
 000002FE  8B 45 2C			mov				eax, [ebp + AFTERAD_D2]		; n
 00000301  E8 00000000 E		call			writeDec
					mWriteString	showR_answer3
 00000306  52		     1		push	edx
 00000307  BA 00000216 R     1		mov		edx, OFFSET showR_answer3
 0000030C  E8 00000000 E     1		call	writeString
 00000311  5A		     1		pop		edx
 00000312  8B 45 28			mov				eax, [ebp + AFTERAD_D1]		; real answer
 00000315  E8 00000000 E		call			writeDec
					mWriteString	showR_answer4
 0000031A  52		     1		push	edx
 0000031B  BA 00000223 R     1		mov		edx, OFFSET showR_answer4
 00000320  E8 00000000 E     1		call	writeString
 00000325  5A		     1		pop		edx
 00000326  E8 00000000 E		call			CrLf

					; compare user answer to actual answer:
 0000032B  8B 45 24			mov				eax, [ebp + AFTERAD_D0]		; user answer
 0000032E  8B 5D 28			mov				ebx, [ebp + AFTERAD_D1]		; real answer
 00000331  3B C3			cmp				eax, ebx
 00000333  75 0E			jne				showResults_WRONG

 00000335				showResults_RIGHT:
						mWriteString	showR_Right
 00000335  52		     1		push	edx
 00000336  BA 00000232 R     1		mov		edx, OFFSET showR_Right
 0000033B  E8 00000000 E     1		call	writeString
 00000340  5A		     1		pop		edx
 00000341  EB 0C				jmp				showResults_CLEANUP

 00000343				showResults_WRONG:
						mWriteString	showR_wrong
 00000343  52		     1		push	edx
 00000344  BA 00000248 R     1		mov		edx, OFFSET showR_wrong
 00000349  E8 00000000 E     1		call	writeString
 0000034E  5A		     1		pop		edx

 0000034F				showResults_CLEANUP:
 0000034F  E8 00000000 E		call			CrLf
					mWriteString	showR_LB
 00000354  52		     1		push	edx
 00000355  BA 00000277 R     1		mov		edx, OFFSET showR_LB
 0000035A  E8 00000000 E     1		call	writeString
 0000035F  5A		     1		pop		edx
 00000360  E8 00000000 E		call			CrLf
 00000365  61				popad
 00000366  C2 0008			ret 8 
 00000369			showResults ENDP










				; ------------------------------------------------------------------
 00000369			tryAgain PROC
				;
				; Description: Asks user if he or she would like to display another 
				;  problem. Entering either 'y' or 'Y' will allow the user to play 
				;  the game again.
				; Receives: see parameters
				; Returns: 1 for quit, 0 for play again
				; Registers Modified: none
				; Parameters: (in stack style, reverse order):
					; argument0 = @try again (DWORD)
 00000369  60				pushad
 0000036A  8B EC			mov				ebp, esp

					;-------------------------------------------------------------------|
 0000036C  83 EC 14			sub			esp, MAX_CHARS		; LOCAL VARIABLES:					|
					;	TRY_BUFFER		EQU BYTE PTR [ebp - MAX_CHARS]					|
					;-------------------------------------------------------------------|

 0000036F  E8 00000000 E		call			CrLf
					mWriteString	tryAgain_prompt
 00000374  52		     1		push	edx
 00000375  BA 000002B4 R     1		mov		edx, OFFSET tryAgain_prompt
 0000037A  E8 00000000 E     1		call	writeString
 0000037F  5A		     1		pop		edx
 00000380  E8 00000000 E		call			CrLf
					mWriteString	tryAgain_inst
 00000385  52		     1		push	edx
 00000386  BA 000002DB R     1		mov		edx, OFFSET tryAgain_inst
 0000038B  E8 00000000 E     1		call	writeString
 00000390  5A		     1		pop		edx


					; read input (into local variable)
 00000391  8D 55 FC				lea				edx, [ebp - 4]
 00000394  B9 00000002				mov				ecx, 2 ; only read first char entered: 
 00000399  E8 00000000 E			call			ReadString

					; calculate input:
 0000039E  B8 00000000				mov				eax, 0 ; zero out
 000003A3  8A 45 FC				mov				al, [ebp - 4]

						; ASCII_Y = 121
 000003A6  83 F8 79				cmp				eax, ASCII_Y
 000003A9  74 05				je				TRYAGAIN_YES

						; ASCII_Y_UP = 89
 000003AB  83 F8 59				cmp				eax, ASCII_Y_UP
 000003AE  75 11				jne				TRYAGAIN_NO

 000003B0				TRYAGAIN_YES:
 000003B0  8B 45 24				mov				eax, [EBP + AFTERAD_D0]
 000003B3  BB 00000000				mov				ebx, 0
 000003B8  89 18				mov				[eax], ebx
 000003BA  E8 00000000 E			call			CrLf
 000003BF  EB 20				jmp				TRYAGAIN_CLEANUP

 000003C1				TRYAGAIN_NO:
 000003C1  8B 45 24				mov				eax, [EBP + AFTERAD_D0]
 000003C4  BB 00000001				mov				ebx, 1
 000003C9  89 18				mov				[eax], ebx
 000003CB  E8 00000000 E			call			CrLf
						mWriteString	tryAgain_thanks
 000003D0  52		     1		push	edx
 000003D1  BA 00000300 R     1		mov		edx, OFFSET tryAgain_thanks
 000003D6  E8 00000000 E     1		call	writeString
 000003DB  5A		     1		pop		edx
 000003DC  E8 00000000 E			call			CrLf

 000003E1				TRYAGAIN_CLEANUP:
 000003E1  8B E5				mov		esp, ebp	; remove locals from stack
 000003E3  61					popad
 000003E4  C2 0008				ret 8 
 000003E7			tryAgain ENDP





				END main
Microsoft (R) Macro Assembler Version 14.00.24210.0	    03/19/17 18:56:57
$Combos     (abreu_assignment06B.asm			     Symbols 2 - 1




Macros:

                N a m e                 Type

mReadString  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000363 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000003E7 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
combinations . . . . . . . . . .	P Near	 0000024B _TEXT	Length= 00000061 Public STDCALL
  COMB_NUMERATOR . . . . . . . .	L Near	 00000251 _TEXT	
  COMB_DENOMINATOR . . . . . . .	L Near	 00000265 _TEXT	
  COMB_DIVIDE  . . . . . . . . .	L Near	 0000029B _TEXT	
  COMB_CLEANUP . . . . . . . . .	L Near	 000002A8 _TEXT	
factorial  . . . . . . . . . . .	P Near	 000002AC _TEXT	Length= 0000002A Public STDCALL
  FACTORIAL_BASE . . . . . . . .	L Near	 000002BE _TEXT	
  FACTORIAL_RECURSE  . . . . . .	L Near	 000002C0 _TEXT	
  FACTORIAL_END  . . . . . . . .	L Near	 000002D2 _TEXT	
getData  . . . . . . . . . . . .	P Near	 000001A7 _TEXT	Length= 00000038 Public STDCALL
getRandomRange . . . . . . . . .	P Near	 0000018B _TEXT	Length= 0000001C Public STDCALL
introduction . . . . . . . . . .	P Near	 00000089 _TEXT	Length= 00000091 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000089 Public STDCALL
  GAME_LOOP  . . . . . . . . . .	L Near	 0000000A _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
showProblem  . . . . . . . . . .	P Near	 0000011A _TEXT	Length= 00000071 Public STDCALL
showResults  . . . . . . . . . .	P Near	 000002D6 _TEXT	Length= 00000093 Public STDCALL
  showResults_RIGHT  . . . . . .	L Near	 00000335 _TEXT	
  showResults_WRONG  . . . . . .	L Near	 00000343 _TEXT	
  showResults_CLEANUP  . . . . .	L Near	 0000034F _TEXT	
stringSize . . . . . . . . . . .	P Near	 00000228 _TEXT	Length= 00000023 Public STDCALL
  pInput . . . . . . . . . . . .	DWord	 bp + 00000008
  pInputSize . . . . . . . . . .	DWord	 bp + 0000000C
  STRINGSIZE_COUNT . . . . . . .	L Near	 00000236 _TEXT	
  STRINGSIZE_END . . . . . . . .	L Near	 0000023F _TEXT	
stringToDec  . . . . . . . . . .	P Near	 000001DF _TEXT	Length= 00000049 Public STDCALL
  STRINGTODEC_ADDDIGIT . . . . .	L Near	 000001EF _TEXT	
  VALID_INPUT  . . . . . . . . .	L Near	 000001FB _TEXT	
  STRINGTODEC_ERROR  . . . . . .	L Near	 00000218 _TEXT	
  STRINGTODEC_END  . . . . . . .	L Near	 00000224 _TEXT	
tryAgain . . . . . . . . . . . .	P Near	 00000369 _TEXT	Length= 0000007E Public STDCALL
  TRYAGAIN_YES . . . . . . . . .	L Near	 000003B0 _TEXT	
  TRYAGAIN_NO  . . . . . . . . .	L Near	 000003C1 _TEXT	
  TRYAGAIN_CLEANUP . . . . . . .	L Near	 000003E1 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
AFTERAD_D0 . . . . . . . . . . .	Number	 00000024h   
AFTERAD_D1 . . . . . . . . . . .	Number	 00000028h   
AFTERAD_D2 . . . . . . . . . . .	Number	 0000002Ch   
AFTERAD_D3 . . . . . . . . . . .	Number	 00000030h   
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ASCII_0  . . . . . . . . . . . .	Number	 00000030h   
ASCII_9  . . . . . . . . . . . .	Number	 00000039h   
ASCII_Y_UP . . . . . . . . . . .	Number	 00000059h   
ASCII_Y  . . . . . . . . . . . .	Number	 00000079h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
COMB_DEN . . . . . . . . . . . .	Text   	 DWORD PTR [ebp - 8]
COMB_NR_FAC  . . . . . . . . . .	Text   	 DWORD PTR [ebp - 16]
COMB_NUM . . . . . . . . . . . .	Text   	 DWORD PTR [ebp - 4]
COMB_R_FAC . . . . . . . . . . .	Text   	 DWORD PTR [ebp - 12]
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
D_TAB  . . . . . . . . . . . . .	Byte	 00000361 _DATA	
D_stringSize . . . . . . . . . .	Byte	 0000034A _DATA	
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_CHARS  . . . . . . . . . . .	Number	 00000014h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
N_MAX  . . . . . . . . . . . . .	Number	 0000000Ch   
N_MIN  . . . . . . . . . . . . .	Number	 00000003h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PROGRAM_NAME . . . . . . . . . .	Text   	 "Combos, a Combination Quiz by James Cameron Abreu", 0
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
STK_D0 . . . . . . . . . . . . .	Number	 00000008h   
STK_D1 . . . . . . . . . . . . .	Number	 0000000Ch   
STK_D2 . . . . . . . . . . . . .	Number	 00000010h   
STK_D3 . . . . . . . . . . . . .	Number	 00000014h   
STK_D4 . . . . . . . . . . . . .	Number	 00000018h   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
TRY_BUFFER . . . . . . . . . . .	Text   	 BYTE PTR [ebp - MAX_CHARS]
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
actualSize . . . . . . . . . . .	DWord	 000001C7 _DATA	
answerConverted  . . . . . . . .	DWord	 000001CB _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
finalSum . . . . . . . . . . . .	DWord	 000001EC _DATA	
getData_prompt . . . . . . . . .	Byte	 00000187 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputError . . . . . . . . . . .	Byte	 000001CF _DATA	
intro_formula1 . . . . . . . . .	Byte	 000000B4 _DATA	
intro_formula2 . . . . . . . . .	Byte	 000000C1 _DATA	
intro_instructions . . . . . . .	Byte	 00000032 _DATA	
intro_limits1  . . . . . . . . .	Byte	 000000CE _DATA	
intro_limits2  . . . . . . . . .	Byte	 000000E9 _DATA	
intro_limits3  . . . . . . . . .	Byte	 000000FC _DATA	
intro_title  . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxN . . . . . . . . . . . . . .	DWord	 00000116 _DATA	
minN . . . . . . . . . . . . . .	DWord	 00000112 _DATA	
n  . . . . . . . . . . . . . . .	DWord	 0000011A _DATA	
quit . . . . . . . . . . . . . .	DWord	 00000346 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
result . . . . . . . . . . . . .	DWord	 000001F0 _DATA	
r  . . . . . . . . . . . . . . .	DWord	 0000011E _DATA	
showProb_Q . . . . . . . . . . .	Byte	 00000122 _DATA	
showProb_n . . . . . . . . . . .	Byte	 0000012D _DATA	
showProb_r . . . . . . . . . . .	Byte	 00000154 _DATA	
showR_LB . . . . . . . . . . . .	Byte	 00000277 _DATA	
showR_answer1  . . . . . . . . .	Byte	 000001F4 _DATA	
showR_answer2  . . . . . . . . .	Byte	 00000202 _DATA	
showR_answer3  . . . . . . . . .	Byte	 00000216 _DATA	
showR_answer4  . . . . . . . . .	Byte	 00000223 _DATA	
showR_right  . . . . . . . . . .	Byte	 00000232 _DATA	
showR_wrong  . . . . . . . . . .	Byte	 00000248 _DATA	
tryAgain_inst  . . . . . . . . .	Byte	 000002DB _DATA	
tryAgain_prompt  . . . . . . . .	Byte	 000002B4 _DATA	
tryAgain_thanks  . . . . . . . .	Byte	 00000300 _DATA	
userInput  . . . . . . . . . . .	Byte	 000001B3 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
